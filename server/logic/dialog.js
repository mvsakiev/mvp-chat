// server/logic/dialog.js
import { chatText } from "../providers/openaiText.js"; // —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
import { chatJSON } from "../providers/openai.js";      // —Å—Ç—Ä–æ–≥–æ JSON (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
import { getRagSnippets } from "./rag.js";

/** –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ ¬´–ø–æ–Ω–∏–º–∞–Ω–∏—è¬ª */
function updateMastery(prev = 0, userMsg = "") {
  const s = (userMsg || "").toLowerCase();
  let m = prev;
  if (/(–ø–æ–Ω—è—Ç–Ω–æ|—è—Å–Ω–æ|–æ–∫|—Å–ø–∞—Å–∏–±–æ|–≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ|—Å–ø—Å)/.test(s)) m += 0.12;
  if (/(–Ω–µ –ø–æ–Ω–∏–º–∞—é|–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ|–ø–æ—è—Å–Ω–∏|–æ–±—ä—è—Å–Ω–∏|—á—Ç–æ –∑–Ω–∞—á–∏—Ç)/.test(s)) m -= 0.08;
  if (/(–ø—Ä–∞–≤–∏–ª—å–Ω–æ|–ø–æ–ª—É—á–∏–ª–æ—Å—å|—Å–¥–µ–ª–∞–ª|—Ä–µ—à–∏–ª|–≤–µ—Ä–Ω–æ)/.test(s)) m += 0.08;
  return Math.max(0, Math.min(1, m));
}

/** –£—Å–ª–æ–≤–∏–µ –ø–æ–∫–∞–∑–∞ –º–∏–Ω–∏-—Ç–µ—Å—Ç–∞ */
function shouldQuiz({ turn, mastery, userMsg }) {
  if (/—Ç–µ—Å—Ç|–ø—Ä–æ–≤–µ—Ä—å|–≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç—É|–ø—Ä–æ–≤–µ—Ä–∫–∞/i.test(userMsg || "")) return true;
  if ((turn || 1) >= 4 && (mastery || 0) >= 0.35) return true;
  return false;
}

/** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏-—Ç–µ—Å—Ç–∞ (3‚Äì5 –≤–æ–ø—Ä–æ—Å–æ–≤) —á–µ—Ä–µ–∑ JSON */
async function generateChecks({ subject, grade, topic, context_stub }) {
  const SYS = `–¢—ã ‚Äî —à–∫–æ–ª—å–Ω—ã–π —Ç—å—é—Ç–æ—Ä. –°–æ—Å—Ç–∞–≤—å –º–∏–Ω–∏-—Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ —Å—Ç—Ä–æ–≥–æ –≤ JSON-–º–∞—Å—Å–∏–≤–µ.
–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç:
{
 "type": "mcq"|"short",
 "question": string,
 "options": string[] (–¥–ª—è mcq),
 "answer": string,            // –¥–ª—è short ‚Äî —ç—Ç–∞–ª–æ–Ω; –¥–æ–ø—É—Å–∫–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã —á–µ—Ä–µ–∑ |
 "hint": string,
 "explanation": string
}
–¢–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥. 3‚Äì5 –≤–æ–ø—Ä–æ—Å–æ–≤. –£—Ä–æ–≤–µ–Ω—å ‚Äî ${grade} –∫–ª–∞—Å—Å. –ü—Ä–µ–¥–º–µ—Ç ‚Äî ${subject}.`;

  const USR = `–¢–µ–º–∞: ${topic}
–ö–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:
${context_stub || "(–Ω–µ—Ç)"}
–°–¥–µ–ª–∞–π –±–∞–ª–∞–Ω—Å: 2‚Äì3 mcq –∏ 1‚Äì2 short.`;

  try {
    const arr = await chatJSON({
      messages: [
        { role: "system", content: SYS },
        { role: "user", content: USR }
      ],
      temperature: 0.4,
      max_tokens: 900
    });
    return Array.isArray(arr) ? arr.slice(0, 5) : [];
  } catch {
    return [];
  }
}

/** –ì—Ä—É–±–∞—è –∑–∞—á–∏—Å—Ç–∫–∞ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö "–≤–æ–ø—Ä–æ—Å–æ–≤" –≤ —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ checks —É–∂–µ –µ—Å—Ç—å */
function stripQuizLikeFromText(text = "") {
  if (!text) return text;

  // 1) –£–¥–∞–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "–ú–∏–Ω–∏-—Ç–µ—Å—Ç", "–¢–µ—Å—Ç" –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å "–í–æ–ø—Ä–æ—Å"
  const patterns = [
    /(^|\n)#{1,6}\s*(–º–∏–Ω–∏[-\s]?—Ç–µ—Å—Ç|—Ç–µ—Å—Ç)\b[\s\S]*$/i,
    /(^|\n)(–º–∏–Ω–∏[-\s]?—Ç–µ—Å—Ç|—Ç–µ—Å—Ç)\s*[:\-‚Äì]\s*[\s\S]*$/i,
  ];
  for (const re of patterns) {
    if (re.test(text)) text = text.replace(re, "").trim();
  }

  // 2) –†–µ–∂–µ–º –±–ª–æ–∫–∏ —Å–ø–∏—Å–∫–æ–≤, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ –ø–µ—Ä–µ—á–µ–Ω—å –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–æ–º–µ—Ä. —Ç–µ–∫—Å—Ç ... –≤–∞—Ä–∏–∞–Ω—Ç—ã)
  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é" —Å—Ç—Ä–æ–∫—É –∏ –æ—Ç–∫—É—Å—ã–≤–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –Ω–µ—ë
  const suspiciousIdx = text.search(
    /(^|\n)\s*((–≤–æ–ø—Ä–æ—Å\s*\d+)|(\d+[\).\s])|([\-*]\s+[A-D–ê-–î][\).\s]))/i
  );
  if (suspiciousIdx > -1) {
    text = text.slice(0, suspiciousIdx).trim();
  }

  // 3) –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π ‚Äî –≤–µ—Ä–Ω—ë–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–æ–Ω—Å (–Ω–∏–∂–µ –¥–æ–±–∞–≤–∏–º –µ—â—ë —Ä–∞–∑)
  return text.trim();
}

/** –û–¥–∏–Ω —Ö–æ–¥ –¥–∏–∞–ª–æ–≥–∞ */
export async function dialogTurn({ session, userMessage }) {
  const { subject, grade, style, normalized, history, mastery = 0 } = session;
  const topic = normalized?.topic || "";
  const context_stub = normalized?.context_stub || "";

  const SYSTEM = `–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —à–∫–æ–ª—å–Ω—ã–π —Ç—å—é—Ç–æ—Ä.
–ó–∞–¥–∞—á–∏:
- –û–±—ä—è—Å–Ω—è–π "${topic}" –Ω–∞ —É—Ä–æ–≤–Ω–µ ${grade} –∫–ª–∞—Å—Å–∞, —Å—Ç–∏–ª—å: ${style}.
- –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∞–±–∑–∞—Ü–∞–º–∏, –ø–æ —à–∞–≥–∞–º, —Å –º–∏–Ω–∏-–≤–æ–ø—Ä–æ—Å–∞–º–∏.
- –§–æ—Ä–º—É–ª—ã –¥–∞–≤–∞–π –≤ LaTeX ($E=mc^2$).
- –ï–°–õ–ò —Ç—ã —Ä–µ—à–∞–µ—à—å –≤—ã–¥–∞—Ç—å –º–∏–Ω–∏-—Ç–µ—Å—Ç ‚Äî –ù–ï –≤—Å—Ç–∞–≤–ª—è–π –≤–æ–ø—Ä–æ—Å—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
  –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –¢–û–õ–¨–ö–û –æ—Ç–¥–µ–ª—å–Ω—ã–º JSON-–º–∞—Å—Å–∏–≤–æ–º (–ø–æ–ª–µ checks), –∞ –≤ —Ç–µ–∫—Å—Ç–µ —Å–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: "üìã –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –º–∏–Ω–∏-—Ç–µ—Å—Ç –Ω–∏–∂–µ."`;

  // –∫–æ—Ä–æ—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
  const last = (history || []).slice(-10);

  // RAG-–ø–æ–¥—Å–∫–∞–∑–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
  const ragHints = await getRagSnippets({ subject, topic, grade });

  const messages = [
    { role: "system", content: SYSTEM },
    { role: "system", content: `–ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (RAG):\n${ragHints.join("\n")}` },
    {
      role: "system",
      content:
`–ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ –ù–ï —Ü–∏—Ç–∏—Ä—É–π –¥–æ—Å–ª–æ–≤–Ω–æ):
${context_stub || "(–Ω–µ—Ç)"}`
    },
    ...last.map(m => ({ role: m.role, content: m.content })),
    { role: "user", content: String(userMessage || "") }
  ];

  // ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç: —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç ‚Äî
  let answerText = "";
  try {
    answerText = await chatText({
      messages,
      temperature: 0.4,
      max_tokens: 900
    });
  } catch {
    // —Ñ–æ–ª–±—ç–∫, –µ—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–π –≤—ã–∑–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è
    answerText = `–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –ø–æ —à–∞–≥–∞–º:
1) –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ "${topic}" —Å–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ –∑–∞–¥–∞—á–∏?
2) –ù–∞–ø–∏—à–∏ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ —É–∂–µ –ø–æ–Ω—è—Ç–Ω–æ ‚Äî —è –¥–æ–ø–æ–ª–Ω—é.`;
  }

  // –æ–±–Ω–æ–≤–∏–º –æ—Ü–µ–Ω–∫—É ¬´–ø–æ–Ω–∏–º–∞–Ω–∏—è¬ª
  const newMastery = updateMastery(mastery, userMessage);

  // —Ä–µ—à–∞–µ–º, –≤—ã–¥–∞–≤–∞—Ç—å –ª–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç
  let checks = [];
  const nextTurn = (session.turn || 1) + 1;
  if (shouldQuiz({ turn: nextTurn, mastery: newMastery, userMsg: userMessage })) {
    checks = await generateChecks({ subject, grade, topic, context_stub });
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç ‚Äî —á–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç –æ—Ç "–≤–æ–ø—Ä–æ—Å–æ–≤" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–æ–Ω—Å
  if (checks.length) {
    answerText = stripQuizLikeFromText(answerText);
    if (!answerText) {
      answerText = "üìã –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –º–∏–Ω–∏-—Ç–µ—Å—Ç –Ω–∏–∂–µ.";
    } else if (!/–º–∏–Ω–∏.?—Ç–µ—Å—Ç|üìã/i.test(answerText)) {
      answerText += "\n\nüìã –Ø –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –º–∏–Ω–∏-—Ç–µ—Å—Ç –Ω–∏–∂–µ.";
    }
  }

  return {
    assistant: {
      message: answerText,
      examples: [],
      checks,
      homework: [],
      citations: [],
      tutor_state: {
        mastery: newMastery,
        next_step: checks.length
          ? "–ü—Ä–æ–π–¥–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —è—Å–Ω–æ ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏—é."
          : "–ó–∞–¥–∞–π —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏ –º–∏–Ω–∏-—Ç–µ—Å—Ç."
      }
    }
  };
}
